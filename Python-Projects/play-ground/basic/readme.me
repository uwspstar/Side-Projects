### how to run python
```
$ python -v 
$ python3 -v
$ python
$ quit()
$ python3
```
### xcrun: error: invalid active developer path catalina
```
xcode-select --install
xcode-select --reset
```
### code . command not working in vs code
- https://code.visualstudio.com/docs/setup/mac

### The Modern Python 3 Bootcamp : Colt Steele
- https://www.udemy.com/course/the-modern-python3-bootcamp

### Number
- int
- float
```
**	Exponentiation
%	Modulo
//	Integer Division
```
### variable
-  Names are case-sensitive
- Variables must start with a letter or underscore
- The rest of the name must consist of letters, numbers, or underscores
- most variables should be snake_case (underscores between words)
- Most variables should be also be lowercase, with some exceptions:
CAPITAL_SNAKE_CASE usually refers to constants (e.g. PI = 3.14)
- UpperCamelCase usually refers to a class
- Variables that start and end with two underscores (called "dunder" for double underscore) are supposed to be private or left alone (e.g __no_touchy__)
- dynamic typing, since variables can change types readily
- String literals in Python can be declared with either single or double quotes
- String Escape Characters, All escape characters start with a backslash "\".
- You can do advanced things like include hexadecimal characters with "\x"
hexadecimal = "\x41\x42\x43"  # "abc
- Formatting Strings :The new way (new in Python 3.6+) => F-Strings
```
x = 10
formatted = f"I've told you {x} times already!"
### old versio 
### formatted = "I've told you {} times already!".format(x)
### formatted = "I've told you %d times already!" % (x)
```
### BOOLEAN AND CONDITIONAL LOGIC
- User Input
```
name = input("Enter your name here: ")
Enter your name here: 
```
- Comparison Operators ```==```, ```!=```, ```>```, ```<```, ```>=```, ```<=```
- Logical Operators ```and```, ```or```, ```not```
##### is vs. "=="
- In python, "==" and "is" are very similar comparators, however they are not the same
```
a = [1, 2, 3]  # a list of numbers
b = [1, 2, 3]
a == b  # True
a is b  # False

c = b
b is c  # True
```
- "is" is only truthy if the variables reference the same item in memory
- ```$ touch age.py```


- Python random.choice() function ```choice``` https://pynative.com/python-random-choice/
```
from random import choice
food = choice(['apple','grape', 'bacon', 'steak', 'worm'])
if food == 'apple' or food == 'grape':
    print ("fruit")
```
### loop
- Use for and while loops to iterate over ranges and strings 
- for
```
for item in iterable_object:
    # do something with item
```
- range(6) gives you integers from 0 thru 5 ( shown)
- range(1, 8) will give you integers from 1 to 7
- range(1, 10, 2)  will give you odds from 1 to 10
- range(7, 0, -1)  will give you integers from 7 to 1
```
for number in range(1, 8):
    print(number)
```
- while
```
while im_tired:
    # seek caffeine
```
```
user_response = None
while user_response != "please":
    user_response = input("Ah ah ah, you didn't say the magic word: ")
```
- break
```
while True:
    command = input("Type 'exit' to exit: ")
    if (command == "exit"):
        break
```
```
or x in range(1, 101):
    print(x)
    if x == 3:
        break
```
### List
```
tasks = ["Install Python", "Learn Python", "Take a break"]
```
- len functions
```
tasks = ["Install Python", "Learn Python", "Take a break"]

len(tasks) # 3

tasks = list(range(1, 4))

print(tasks[0]) # "Install Python"
print(tasks[-1]) # "Take a break"

"Take a break" in tasks # True
"Colt" in tasks # False

```
- for loop list
```
numbers = [1,2,3,4]

for number in numbers:
    print(number)
```
- while loop
```
numbers = [1, 2, 3, 4]
i = 0

while i < len(numbers):
    print(numbers[i])
    i += 1
```
- append
```
first_list = [1, 2, 3, 4]

first_list.append(5)

print(first_list) # [1, 2, 3, 4, 5]
```
- extend
```
first_list = [1, 2, 3, 4]

first_list.append(5, 6, 7, 8) # does not work!

first_list.append([5, 6, 7, 8])

print(first_list) # [1, 2, 3, 4,  [5, 6, 7, 8]]

correct_list = [1, 2, 3, 4]

correct_list.extend([5, 6, 7, 8])

print(correct_list) # [1, 2, 3, 4, 5, 6, 7, 8]
```
- insert
```
first_list = [1, 2, 3, 4]

first_list.insert(2, 'Hi!') 

print(first_list) # [1, 2, 'Hi!', 3, 4]

first_list.insert(-1, 'The end!') 

print(first_list) # [1, 2, 'Hi!', 3, 'The end!', 4]
```
- clear
```
first_list = [1, 2, 3, 4]

first_list.clear()

print(first_list) # []
```
- pop
```
first_list = [1, 2, 3, 4]

first_list.pop() # 4

first_list.pop(1) # 2
```
- remove
```
first_list = [1, 2, 3, 4, 4, 4]

first_list.remove(2)

print(first_list) # [1, 3, 4, 4, 4]

first_list.remove(4)

print(first_list) # [1, 3, 4, 4]
```
- del
```
first_list = [1, 2, 3, 4]

del first_list[3]

print(first_list) # [1, 2, 3]

del first_list[1]

print(first_list) # [1, 3]
```
- index
```
numbers = [5, 6, 7, 8, 9, 10]

numbers.index(6) # 1
numbers.index(9) # 4

Can specify start and end
numbers = [5, 5, 6, 7, 5, 8, 8, 9, 10]

numbers.index(5) # 0
numbers.index(5, 1) # 1
numbers.index(5, 2) # 4
numbers.index(8, 6, 8) # 6 
# 6 is start index, 8 is end index
```
- count
```
numbers = [1, 2, 3, 4, 3, 2, 1, 4, 10, 2]

numbers.count(2) # 3
numbers.count(21) # 0
numbers.count(3) # 2
```
- reverse
```
first_list = [1, 2, 3, 4]

first_list.reverse()

print(first_list) # [4, 3, 2, 1]
```
- sort
```
another_list = [6, 4, 1, 2, 5]

another_list.sort()

print(another_list) # [1, 2, 4, 5, 6]
```
- join
```
words = ['Coding', 'Is', 'Fun!']

' '.join(words) # 'Coding is Fun!'

name = ['Mr', "Steele"]

'. '.join(name) # 'Mr. Steele'
```